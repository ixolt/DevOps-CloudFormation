{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Nginx content caching solution",
  "Parameters": {
    "AWSAccount": {
      "Type": "String"
    },
    "InstanceType": {
      "Type": "String"
    },
    "SSHKeyPair": {
      "Type": "String"
    },
	"NLBSubnet": {
		"Type": "CommaDelimitedList"	
	},
	"AppSubnet": {
		"Type": "CommaDelimitedList"
	},
    "AppGroupName": {
      "Type": "String"
    },
    "AppEnvironment": {
      "Type": "String"
    },
    "BackEnd": {
      "Type": "String"
    },
    "SSHLocation": {
      "Type": "String"
    },
    "SplunkAdminPassword": {
      "Type": "String"
    },
	"VPCId": {
	  "Type": "String"
	}
  },
  "Mappings": {
    "EncryptedUbuntuAMI": {
      "us-east-1": { "Q4WebStage": "ami-7d607006", "Q4WebProd": "ami-d81606a3"},
      "us-east-2": { "Q4WebStage": "ami-af6d4fca", "Q4WebProd": "ami-f586a490" },
      "us-west-2": { "Q4WebProd": "ami-726d990a" },
      "ca-central-1": { "Q4WebStage": "ami-0009b764" }
    }
  },
  "Resources": {
	"ServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT20M",
          "Count": "1"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "4",
          "MinInstancesInService": "1",
          "PauseTime": "PT5M",
          "WaitOnResourceSignals": "true"
        }
      },
      "Properties": {
        "VPCZoneIdentifier": { "Ref": "AppSubnet" },
        "LaunchConfigurationName": { "Ref": "LaunchConfig" },
        "MinSize": "2",
        "MaxSize": "2",
        "DesiredCapacity": "2",
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": "60",
		"TargetGroupARNs": [{ "Ref": "TCP80TargetGroup" },{ "Ref": "TCP443TargetGroup" }]
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": { "Ref": "SSHKeyPair" },
        "ImageId": {
          "Fn::FindInMap": [
            "EncryptedUbuntuAMI",
            { "Ref": "AWS::Region" },
            {"Ref": "AWSAccount"}
          ]
        },
        "SecurityGroups": [ { "Ref": "InstanceSecurityGroup" } ],
        "InstanceType": { "Ref": "InstanceType" },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": "100",
              "VolumeType": "gp2"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex \n",
                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 \n",

                "curl -sL https://raw.githubusercontent.com/q4mobile/DevOps-Configuration/master/bootstrap/setup-nginx.sh | bash\n",
                "curl -o /etc/nginx/backend.conf https://raw.githubusercontent.com/q4mobile/DevOps-NginxConfiguration/master/backend-", { "Ref": "BackEnd" }, ".conf", "\n",
                "sudo service nginx restart \n",

                "curl -sL https://raw.githubusercontent.com/q4mobile/DevOps-Configuration/master/bootstrap/setup-codedeploy-agent.sh | bash\n",
                "curl -sL https://raw.githubusercontent.com/q4mobile/DevOps-Configuration/master/bootstrap/setup-aws-tools.sh | bash\n",

                "instanceid=\"`wget -qO- http://instance-data/latest/meta-data/instance-id`\"\n",
                "region=\"`wget -qO- http://instance-data/latest/meta-data/placement/availability-zone | sed -e 's:\\([0-9][0-9]*\\)[a-z]*\\$:\\\\1:'`\"\n",
                "tag=Q4Web-", { "Ref": "AppEnvironment" }, "-", { "Ref": "AppGroupName" }, "-$region-$instanceid\n", "aws ec2 create-tags --resources $instanceid --tags Key=Name,Value=$tag --region $region\n",

                "hostnamectl set-hostname Q4Web-",
                { "Ref": "AppEnvironment" }, "-", { "Ref": "AppGroupName" }, "-$region-$instanceid\n",

                "curl -sL https://raw.githubusercontent.com/q4mobile/DevOps-Configuration/master/bootstrap/setup-newrelic.sh | bash\n",

                "sudo wget -O splunkforwarder-6.6.3-e21ee54bc796-linux-2.6-amd64.deb 'https://www.splunk.com/bin/splunk/DownloadActivityServlet?architecture=x86_64&platform=linux&version=6.6.3&product=universalforwarder&filename=splunkforwarder-6.6.3-e21ee54bc796-linux-2.6-amd64.deb&wget=true' && sudo dpkg -i splunkforwarder-6.6.3-e21ee54bc796-linux-2.6-amd64.deb\n",
                "sudo wget -O /opt/splunkclouduf.spl https://github.com/q4mobile/DevOps-Configuration/blob/chrisj-devops-4073/bootstrap/splunkclouduf.spl?raw=true\n",

                "sudo /opt/splunkforwarder/bin/splunk start --accept-license --answer-yes --auto-ports --no-prompt\n",
                "sudo /opt/splunkforwarder/bin/splunk edit user admin -password ", {"Ref": "SplunkAdminPassword"}, " -auth admin:changeme\n",
                "sudo /opt/splunkforwarder/bin/splunk install app /opt/splunkclouduf.spl -auth admin:", {"Ref": "SplunkAdminPassword"}, "\n",
                "sudo /opt/splunkforwarder/bin/splunk add monitor /var/log/nginx/ -sourcetype nginx-",{"Ref":"AppEnvironment"}," -index q4webcdn -auth admin:", {"Ref":"SplunkAdminPassword"} ,"\n",
                "sudo /opt/splunkforwarder/bin/splunk enable boot-start\n",
                "sudo /opt/splunkforwarder/bin/splunk restart\n\n",

                "/usr/local/bin/cfn-init -v --stack ", { "Ref": "AWS::StackName" }, " --resource LaunchConfig --configsets nginx_install --region ", { "Ref": "AWS::Region" }, "\n",
                "/usr/local/bin/cfn-signal -e $? --stack ", { "Ref": "AWS::StackName" }, " --resource ServerGroup  --region ", { "Ref": "AWS::Region" }, "\n"

              ]
            ]
          }
        },
        "IamInstanceProfile": { "Ref": "InstanceProfile" }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "nginx_install": [ "install_cfn" ]
          },
          "install_cfn": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=", { "Ref": "AWS::StackId" }, "\n",
                      "region=", { "Ref": "AWS::Region" }, "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.ServerGroup.Metadata.AWS::CloudFormation::Init\n",
                      "action=/usr/local/bin/cfn-init -v ",
                      "         --stack ",
                      { "Ref": "AWS::StackName" },
                      "         --resource LaunchConfig ",
                      "         --configsets nginx_install ",
                      "         --region ",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [ "/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf" ]
                }
              }
            }
          }
        }
      }
    },
    "ScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "ServerGroup" },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "ScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "ServerGroup" },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "NetworkOutAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-out if NetworkOut > 400,000,000 for 1 minute",
        "MetricName": "NetworkOut",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "1",
        "Threshold": "400000000",
        "AlarmActions": [
          {
            "Ref": "ScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "ServerGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "NetworkOutAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-in if NetworkOut < 250,000,000 for 10 minutes",
        "MetricName": "NetworkOut",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "10",
        "Threshold": "250000000",
        "AlarmActions": [
          {
            "Ref": "ScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "ServerGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
	"FirstEIP": {
		"Type": "AWS::EC2::EIP",
		"Properties": {
			"Domain": "vpc"
		}
	},
 	"SecondEIP": {
		"Type": "AWS::EC2::EIP",
		"Properties": {
			"Domain": "vpc"
		}
	},
	"NetworkLoadBalancer": {
		"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
		"Properties": {
			"Type":"network",
			"Name": {
				"Fn::Join": [
					"", [
						"NLB-",
						{ "Ref": "AppGroupName" },
						"-Group"
					]	
				]
			},
			"SubnetMappings": [
				{
					"AllocationId": {
						"Fn::GetAtt": [
							"FirstEIP",
							"AllocationId"
						]
					},
					"SubnetId": {
						"Fn::Select" : [ 0, {"Ref": "NLBSubnet"} ] 
					}
				},
				{
					"AllocationId": {
						"Fn::GetAtt": [
							"SecondEIP",
							"AllocationId"
						]
					},
					"SubnetId": {
						"Fn::Select" : [ 1, {"Ref": "NLBSubnet"} ]
					}
				}
			],
			"Scheme": "internet-facing"
		}
	},	
	"TCP80Listener": {
		"Type": "AWS::ElasticLoadBalancingV2::Listener",
		"Properties": {
			"DefaultActions": [{
				"Type": "forward",
				"TargetGroupArn": { "Ref": "TCP80TargetGroup" }
		}],
		"LoadBalancerArn": { "Ref": "NetworkLoadBalancer" },
		"Port": "80",
		"Protocol": "TCP"
		}
	},
	"TCP443Listener": {
		"Type": "AWS::ElasticLoadBalancingV2::Listener",
		"Properties": {
			"DefaultActions": [{
				"Type": "forward",
				"TargetGroupArn": { "Ref": "TCP443TargetGroup" }
		}],
		"LoadBalancerArn": { "Ref": "NetworkLoadBalancer" },
		"Port": "443",
		"Protocol": "TCP"
		}
	},
	"TCP80TargetGroup" : {
		"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
		"Properties" : {
			"HealthCheckPort": 8000,
			"HealthCheckIntervalSeconds" : 30,
			"HealthyThresholdCount" : 3,
			"UnhealthyThresholdCount" : 3,
			"Port" : 80,
			"Protocol" : "TCP",
			"VpcId" : { "Ref": "VPCId" }
		}
	},
	"TCP443TargetGroup" : {
		"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
		"Properties" : {
			"HealthCheckPort": 8000,
			"HealthCheckIntervalSeconds" : 30,
			"HealthyThresholdCount" : 3,
			"UnhealthyThresholdCount" : 3,
			"Port" : 443,
			"Protocol" : "TCP",
			"VpcId" : { "Ref": "VPCId" }
		}
	},
    "InstanceSecurityGroup": {
		"Type": "AWS::EC2::SecurityGroup",
		"Properties": {
        "GroupDescription": "Allows SSH from Q4 HQ and HTTP from anywhere",
        "VpcId": { "Ref": "VPCId" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AppGroupName" },
                  "SG"
                ]
              ]
            }
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "SSHLocation" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp" : "0.0.0.0/0"
          },
		  {
            "IpProtocol": "tcp",
            "FromPort": "8000",
            "ToPort": "8000",
            "CidrIp" : "10.100.0.0/16"
          }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              { "Ref": "AppGroupName" },
              "Role"
            ]
          ]
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:Describe*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:DescribeAssociation",
                "ssm:GetDocument",
                "ssm:ListAssociations",
                "ssm:CreateAssociation",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceInformation"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeInstances",
                "ec2:CreateTags",
                "ec2:DeleteTags"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ds:CreateComputer",
                "ds:DescribeDirectories"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": [
                "arn:aws:s3:::q4cdn*"
              ]
            }
          ]
        },
        "Roles": [ { "Ref": "InstanceRole" } ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "InstanceRole" } ]
      }
    }
  },
  "Outputs": {
    "outputAutoScalingGroup": {
      "Description": "Nginx Autoscaling Group",
      "Value": {
        "Ref": "ServerGroup"
      }
    },
    "outputNLB": {
      "Description": "Nginx Elastic Load Balancer",
      "Value": {
        "Ref": "NetworkLoadBalancer"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": { "default": "EC2 Instance Configuration" },
          "Parameters": [
            "InstanceType",
            "AppGroupName",
            "AppEnvironment",
            "VPC",
            "AppSubnets",
            "SSHKeyPair"
          ]
        }
      ]
    }
  }    
} 