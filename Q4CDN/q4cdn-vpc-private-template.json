{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Base VPC, 2 x Public Subnets, 2 x Private Subnets and 1 x IAM Role.",
  "Parameters": {
    "InstanceTenancy": {
      "Description": "VPC default for single tenant (dedicated) vs multi-tenant (default) hypervisor. Overrides instance level tenancy option.",
      "Type": "String",
      "Default": "default",
      "AllowedValues": [
        "default",
        "dedicated"
      ],
      "ConstraintDescription": "Must be either 'default' for multi-tenant hypervisor or 'dedicated' for single tenant hypervisor."
    }
  },
  "Mappings": {
    "CIDRMapping": {
      "VPC": {
        "CIDR": "10.100.0.0/16"
      },
      "PublicSubnet": {
        "AZ1": "10.100.1.0/24",
        "AZ2": "10.100.2.0/24"
      },
      "PrivateSubnet": {
        "AZ1": "10.100.3.0/24",
        "AZ2": "10.100.4.0/24"
      }
    }
  },
  "Resources": {
    "CodeDeployRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "codedeploy.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "CodeDeployRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "Q4CDN-CodeDeploy-Service-Role",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:PutLifecycleHook",
                "autoscaling:RecordLifecycleActionHeartbeat",
                "autoscaling:CreateAutoScalingGroup",
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:EnableMetricsCollection",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribePolicies",
                "autoscaling:DescribeScheduledActions",
                "autoscaling:DescribeNotificationConfigurations",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:SuspendProcesses",
                "autoscaling:ResumeProcesses",
                "autoscaling:AttachLoadBalancers",
                "autoscaling:PutScalingPolicy",
                "autoscaling:PutScheduledUpdateGroupAction",
                "autoscaling:PutNotificationConfiguration",
                "autoscaling:PutLifecycleHook",
                "autoscaling:DescribeScalingActivities",
                "autoscaling:DeleteAutoScalingGroup",
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceStatus",
                "ec2:TerminateInstances",
                "tag:GetTags",
                "tag:GetResources",
                "sns:Publish",
                "cloudwatch:DescribeAlarms",
                "elasticloadbalancing:DescribeLoadBalancers",
                "elasticloadbalancing:DescribeInstanceHealth",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [ { "Ref": "CodeDeployRole" } ]
      }
    },
    "VPCBase": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "CIDRMapping",
            "VPC",
            "CIDR"
          ]
        },
        "EnableDnsSupport": "True",
        "EnableDnsHostnames": "True",
        "InstanceTenancy": {
          "Ref": "InstanceTenancy"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "VPC"
                ]
              ]
            }
          }
        ]
      }
    },
    "PublicSubnetAZ1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "CIDRMapping",
            "PublicSubnet",
            "AZ1"
          ]
        },
        "MapPublicIpOnLaunch": "True",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PublicAZ1"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPCBase"
        }
      }
    },
    "PublicSubnetAZ2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "CIDRMapping",
            "PublicSubnet",
            "AZ2"
          ]
        },
        "MapPublicIpOnLaunch": "True",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PublicAZ2"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPCBase"
        }
      }
    },
    "PrivateSubnetAZ1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "CIDRMapping",
            "PrivateSubnet",
            "AZ1"
          ]
        },
        "MapPublicIpOnLaunch": "True",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PrivateAZ1"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPCBase"
        }
      }
    },
    "PrivateSubnetAZ2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "CIDRMapping",
            "PrivateSubnet",
            "AZ2"
          ]
        },
        "MapPublicIpOnLaunch": "True",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PrivateAZ2"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPCBase"
        }
      }
    },
    "IGWBase": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "IGW"
                ]
              ]
            }
          }
        ]
      }
    },
    "VGAIGWBase": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "IGWBase"
        },
        "VpcId": {
          "Ref": "VPCBase"
        }
      }
    },
    "NATAZ1IP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NATAZ1": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NATAZ1IP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ1"
        }
      }
    },
    "NATAZ2IP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NATAZ2": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NATAZ2IP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ2"
        }
      }
    },
    "RouteTablePublic": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Public"
                ]
              ]
            }
          }
        ]
      }
    },
    "RouteTablePrivateAZ1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Private"
                ]
              ]
            }
          }
        ]
      }
    },
    "RouteTablePrivateAZ2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Private"
                ]
              ]
            }
          }
        ]
      }
    },
    "RoutePublicDefault": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "IGWBase"
        }
      }
    },
    "RoutePrivateDefaultAZ1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ1"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATAZ1"
        }
      }
    },
    "RoutePrivateDefaultAZ2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATAZ2"
        }
      }
    },
    "RouteAssociationPublicAZ1Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetAZ1"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      }
    },
    "RouteAssociationPublicAZ2Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetAZ2"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      }
    },
    "RouteAssociationPrivateAZ1Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnetAZ1"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ1"
        }
      }
    },
    "RouteAssociationPrivateAZ2Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnetAZ2"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ2"
        }
      }
    }
  },
  "Outputs": {
    "outputVPCID": {
      "Description": "Virtual Private Cloud ID",
      "Value": {
        "Ref": "VPCBase"
      }
    },
    "outputSubnetPublicAZ1": {
      "Description": "Public Subnet in Availability Zone 1 - for Elastic Load Balancer",
      "Value": {
        "Ref": "PublicSubnetAZ1"
      }
    },
    "outputSubnetPublicAZ2": {
      "Description": "Public Subnet in Availability Zone 2 - for Elastic Load Balancer",
      "Value": {
        "Ref": "PublicSubnetAZ2"
      }
    },
    "outputSubnetPrivateAZ1": {
      "Description": "Private Subnet in Availability Zone 1 - for Nginx instances",
      "Value": {
        "Ref": "PrivateSubnetAZ1"
      }
    },
    "outputSubnetPrivateAZ2": {
      "Description": "Private Subnet in Availability Zone 2 - for Nginx instances",
      "Value": {
        "Ref": "PrivateSubnetAZ2"
      }
    },
    "outputNATGatewayPublicIPAZ1": {
      "Description": "NAT Gateway 1 Public IP - outgoing traffic for Private Subnet AZ1",
      "Value": {
        "Ref": "NATAZ1IP"
      }
    },
    "outputNATGatewayPublicIPAZ2": {
      "Description": "NAT Gateway 2 Public IP - outgoing traffic for Private Subnet AZ2",
      "Value": {
        "Ref": "NATAZ2IP"
      }
    },
    "outputCodeDeployRoleArn": {
      "Description": "The ARN for the IAM role used by CodeDeploy",
      "Value": {
        "Fn::GetAtt": [ "CodeDeployRole", "Arn" ]
      }
    }
  }
}