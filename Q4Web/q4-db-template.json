{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "DB Instance",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "VPC",
            "AppSubnets",
            "ADDomain",
            "ADDirectory",
            "ADDNS"
          ]
        },
        {
          "Label": {
            "default":"EC2 Configuration"
          },
          "Parameters": [
            "InstanceType",
            "AppGroupName",
            "PrivateIpAddress",
            "SSHKeyPair",
            "RDPSecurityGroup"
          ]
        },
        {
          "Label":{
            "default": "Bootstrapping & Deployments"
          },
          "Parameters":[
            "OctopusEnvironment",
            "BootstrapScript"
          ]
        },
        {
          "Label": {
            "default": "Billing Tags"
          },
          "Parameters": [
            "BillingGroup"
          ]
        }
      ],
      "ParameterLabels": {
        "InstanceType": {
          "default": "Instance Type:"
        },
        "SSHKeyPair": {
          "default": "Key Pair Name:"
        },
        "AppSubnets": {
          "default":"Database Subnets:"
        },
        "VPC": {
          "default": "VPC ID:"
        },
        "PrivateIpAddress": {
          "default": "Private IP Address:"
        },
        "ADDomain": {
          "default": "Active Directory Domain:"
        },
        "ADDirectory": {
          "default": "Active Directory ID:"
        },
        "ADDNS": {
          "default": "Active Directory Nameservers:"
        },
        "RDPSecurityGroup": {
          "default": "RDP Security Group:"
        },
        "OctopusEnvironment": {
          "default": "Octopus Environment:"
        },
        "BootstrapScript": {
          "default": "Bootstrap Script:"
        },
        "BillingGroup": {
          "default": "Billing Tag:"
        }
      }
    }
  },
  "Parameters": {
    "InstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type. Default is t2.micro",
      "Description": "Select instance type"
    },
    "SSHKeyPair": {
      "Description": "Name of an existing EC2 KeyPair to decrypt RDP Administrator Password for the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "AppSubnets": {
      "Description": "Database Subnet IDs (be sure to select in order DB1 then DB2)",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "AppGroupName": {
      "Description": "Name",
      "Type": "String",
      "Default": "DB"
    },
    "VPC": {
      "Description": "VPC",
      "Type": "AWS::EC2::VPC::Id"
    },
    "PrivateIpAddress": {
      "Description": "Private IP Addresses",
      "Type": "CommaDelimitedList",
      "Default": "172.16.40.100"
    },
    "ADDomain": {
      "Description": "AD Domain Name for use with AWS",
      "Type": "String",
      "ConstraintDescription": "must be the a valid Domain value."
    },
    "ADDirectory": {
      "Description": "AD Directory ID for use with AWS",
      "Type": "String",
      "ConstraintDescription": "must be the a valid Domain ID value."
    },
    "ADDNS": {
      "Description": "Directory Services DNS IPs.",
      "Type": "CommaDelimitedList"
    },
    "RDPSecurityGroup": {
      "Description": "The Security Group for RDP Gateway-based access.",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "OctopusEnvironment": {
      "Description": "The environment that this machine should be registered to in Octopus",
      "Type":"String"
    },
    "BootstrapScript": {
      "Description": "The name of the S3 bucke that contains the server bootstrap script",
      "Type": "String"
    },
    "BillingGroup": {
      "Description": "A unique string that will be used to group all resources for billing (ex: Q4WEB-DR-NA, Q4WEB-PROD-EU)",
      "Type":"String"
    }
  },
  "Mappings": {
    "AWSRegionWinAMI": {
      "us-east-1": {
        "64": "ami-ad0c46ba"
      },
      "eu-west-1": {
        "64": "ami-a9cc1ed0"
      }
    }
  },
  "Resources": {
    "DB01": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "Init": [
              "cfnConfig",
              "ServerInitCommands",
              "finalize"
            ],
            "Update": [
              "cfnConfig",
              "ServerInitCommands",
              "finalize"
            ]
          },
          "cfnConfig": {
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "interval=10\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe --configsets Update --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " --resource DB01 ",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "finalize": {
            "commands": {
              "1-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal.exe -e 0 --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " --resource DB01 --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "waitAfterCompletion": "0"
              }
            }
          }
        },
        "AWS::CloudFormation::Designer": {
          "id": "e4a55ff0-0e75-4102-b791-54feeecfeb2e"
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [ "AWSRegionWinAMI", { "Ref": "AWS::Region" }, "64" ]
        },
        "InstanceType": { "Ref": "InstanceType" },
        "SubnetId": { 
          "Fn::Select": [ "0", { "Ref": "AppSubnets" } ]
        },
        "IamInstanceProfile": { "Ref": "InstanceProfile" },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "-", [ { "Ref": "AppGroupName" }, "01" ] ] }
          },
          { "Key": "q4:Billing:Group", "Value": {"Ref": "BillingGroup"}}          
        ],
        "SecurityGroupIds": [
          { "Ref": "DBSecurityGroup" }
        ],
        "PrivateIpAddress": { "Fn::Select": [ "0", { "Ref": "PrivateIpAddress" } ] },
        "KeyName": { "Ref": "SSHKeyPair" },
        "SsmAssociations": [
          {
            "DocumentName": { "Ref": "SSMDocument" }
          }
        ],
        "BlockDeviceMappings" : [
          {
             "DeviceName" : "/dev/sda1",
             "Ebs" : { "VolumeSize" : "100" }
          },
          {
            "DeviceName" : "/dev/sdm",
            "Ebs" : { "VolumeSize" : "500" }
          }
        ],                  
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell>\n",
                "$instanceid = Invoke-RestMethod -Uri http://169.254.169.254/latest/meta-data/instance-id\n",
                "$newName = $env:COMPUTERNAME\n",
                "Read-S3Object -BucketName ", {"Ref":"BootstrapScript"} ," -Key Bootstrap.ps1 -File Bootstrap.ps1\n",
                ".\\Bootstrap.ps1 -OctopusEnvironment ", {"Ref":"OctopusEnvironment"}," -OctopusMachineRole \"db-server\"\n",                  
                "</powershell> \n"
              ]
            ]
          }
        }
      }
    },
    "DB01RecoveryAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a recovery when instance status check fails for 15 consecutive minutes.",
        "Namespace": "AWS/EC2",
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "15",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [
          { 
            "Fn::Join": [ "", [ "arn:aws:automate:", { "Ref": "AWS::Region" }, ":ec2:recover" ] ]
          }
        ],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "DB01"
            }
          }
        ]
      }
    },
    "DBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to Domain Controller",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join": [ "", [ { "Ref": "AppGroupName" }, "SG" ] ] }
          },
          { "Key": "q4:Billing:Group", "Value": {"Ref": "BillingGroup"}}          
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "SourceSecurityGroupId": { "Ref": "RDPSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1433",
            "ToPort": "1433",
            "CidrIp": "172.16.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "135",
            "ToPort": "139",
            "CidrIp": "172.16.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "445",
            "ToPort": "445",
            "CidrIp": "172.16.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "135",
            "ToPort": "139",
            "CidrIp": "172.23.200.0/21"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "445",
            "ToPort": "445",
            "CidrIp": "172.23.200.0/21"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "135",
            "ToPort": "139",
            "CidrIp": "192.168.200.0/21"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "445",
            "ToPort": "445",
            "CidrIp": "192.168.200.0/21"
          },
          {
            "IpProtocol": "-1",
            "FromPort": "1",
            "ToPort": "65535",
            "CidrIp": "172.21.0.0/16"
          }
        ]
      }
    },
    "SSMDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "1.2",
          "description": "Join instances to an AWS Directory Service domain.",
          "runtimeConfig": {
            "aws:domainJoin": {
              "properties": {
                "directoryId": { "Ref": "ADDirectory" },
                "directoryName": { "Ref": "ADDomain" },
                "dnsIpAddresses": { "Ref": "ADDNS" }
              }
            }
          }
        }
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": { "Fn::Join": [ "-", [ { "Ref": "AppGroupName" }, "Role" ] ] },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:Describe*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:DescribeAssociation",
                "ssm:GetDocument",
                "ssm:ListAssociations",
                "ssm:CreateAssociation",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceInformation"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeInstanceStatus"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ds:CreateComputer",
                "ds:DescribeDirectories"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucketMultipartUploads"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [ { "Ref": "InstanceRole" } ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "InstanceRole" } ]
      }
    },
    "DBDnsZone":{
        "Type" : "AWS::Route53::HostedZone",
        "Properties" : {
            "HostedZoneConfig" : {
                "Comment":"Hosted zone for db server"
            },
            "Name" : { "Fn::Join": [ "", [ { "Ref": "ADDomain" }, "." ] ] }, 
            "VPCs" : [{
                "VPCId":{"Ref":"VPC"},
                "VPCRegion":{ "Ref": "AWS::Region" }
            }]
        }
    },     
    "DBDnsZoneRecord": {
        "Type" : "AWS::Route53::RecordSet",
        "Properties" : {
            "HostedZoneName" : { "Fn::Join": [ "", [ { "Ref": "ADDomain" }, "." ] ] },
            "Name" : { "Fn::Join": [ "", [ "db.", { "Ref": "ADDomain" } ] ] },
            "Type" : "A",
            "TTL" : "900",
            "ResourceRecords" : [
                "172.16.40.100"
            ]
        },
        "DependsOn" : "DBDnsZone"
    } 
  },
  "Outputs": {
    "outputDB01": {
      "Value": {
        "Ref": "DB01"
      }
    }
  }
} 