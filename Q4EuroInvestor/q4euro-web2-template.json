{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "**WARNING** This template creates one or more Amazon EC2 instances and an Elastic Load Balancer. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters": {
    "InstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type. Default is t2.micro",
      "Description": "Select instance type"
    },
    "VPCID": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Select Virtual Private Cloud ID"
    },
    "AppSubnet": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Subnets for Application"
    },
    "ELBSubnet": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Subnets for Elastic Loadbalancer"
    },
    "ELBType": {
      "Type": "String",
      "Default": "internal",
      "AllowedValues": [
        "internal",
        "internet-facing"
      ],
      "Description": "Should Loadbalancer be public or private?"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to decrypt RDP Administrator Password for the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "RDPSecurityGroup": {
      "Description": "The Security Group for RDP Gateway-based access.",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "APPGroupName": {
      "Description": "EC2 Server Instance Name",
      "Type": "String",
      "ConstraintDescription": "Must follow normal syntax conventions"
    },
    "ADDomain": {
      "Description": "AD Domain Name for use with AWS",
      "Type": "String",
      "ConstraintDescription": "must be the a valid Domain value."
    },
    "ADDirectory": {
      "Description": "AD Directory ID for use with AWS",
      "Type": "String",
      "ConstraintDescription": "must be the a valid Domain ID value."
    },
    "ADDNS": {
      "Description": "Directory Services DNS IPs.",
      "Type": "CommaDelimitedList"
    },
    "OctopusEnvironment": {
      "Description": "The Octopus environment that this instance will be registered in.",
      "Type": "String"
    },
    "BootstrapScriptLocation": {
      "Description": "The S3 bucket name where Bootstrap.ps1 is located",
      "Type": "String"
    }
  },
  "Mappings": {
    "AWSRegionWinAMI": {
      "eu-west-1": { "AMI": "ami-0f3f197c" }
      }
    },
  "Resources": {
    "EuroIRWeb1": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                  ]]}
              },
              "c:\\cfn\\hooks.d\\initialize-drive-d.txt": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "REM DISKPART script to mount drive D:\n",
                      "list disk\n",
                      "select disk 1\n",
                      "clean\n",
                      "create partition primary\n",
                      "select partition 1\n",
                      "active\n",
                      "format fs=ntfs quick\n",
                      "assign letter=d\n"
                    ]
                  ]
                }
              }          
            },
            "commands" : {
              "initialize-drive-d" : {
                "command" : "c:\\cfn\\hooks.d\\diskpart.exe /s initialize-drive-d.txt"
              }
            },
            
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\initialize-drive-d.txt"]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionWinAMI",
            { "Ref": "AWS::Region" },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "InstanceSecurityGroup"
              }
            ],
            "SubnetId": {
              "Fn::Select": [
                "0",
                { "Ref": "AppSubnet" }
              ]
            }
          },
          {
            "DeviceIndex": "1",
            "GroupSet": [
              {
                "Ref": "InstanceSecurityGroup"
              }
            ],
            "SubnetId": {
              "Fn::Select": [
                "0",
                { "Ref": "AppSubnet" }
              ]
            }
          }
        ],
        "IamInstanceProfile": { "Ref": "InstanceRoleInstanceProfile" },
        "SsmAssociations": [
          {
            "DocumentName": { "Ref": "SSMDocument" }
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": { "VolumeSize": "80" }
          },
          {
            "DeviceName": "/dev/sdm",
            "Ebs": { "VolumeSize": "100" }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell>\n",
                "cfn-init.exe -v --stack ", { "Ref": "AWS::StackName" }, " --resource EuroIRWeb1", " --region ", { "Ref": "AWS::Region" },
                "\n",
                "Read-S3Object -BucketName ", { "Ref": "BootstrapScriptLocation" }, " -Key Bootstrap.ps1 -File Bootstrap.ps1 \n",
                ".\\Bootstrap.ps1 -OctopusEnvironment \"", { "Ref": "OctopusEnvironment" }, "\" -OctopusMachineRole \"web-server\" -ServerConfigurationProject \"Configure EuroIR Servers\" \n",
                "Rename-Computer -NewName EuroIRWeb1 -Force",
                "\n",
                "</powershell> \n"                
              ]
            ]
          }
        },
        "Tags":
          [
            {
              "Key": "Name",
              "Value": "EuroIRWeb1"
            }
          ],
          "KeyName"
          :
          { "Ref": "KeyName" }
      }
    },
    "EuroIRWeb2": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                  ]]}
              },
              "c:\\cfn\\hooks.d\\initialize-drive-d.txt": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "REM DISKPART script to mount drive D:\n",
                      "list disk\n",
                      "select disk 1\n",
                      "clean\n",
                      "create partition primary\n",
                      "select partition 1\n",
                      "active\n",
                      "format fs=ntfs quick\n",
                      "assign letter=d\n"
                    ]
                  ]
                }
              }          
            },
            "commands" : {
              "initialize-drive-d" : {
                "command" : "c:\\cfn\\hooks.d\\diskpart.exe /s initialize-drive-d.txt"
              }
            },
            
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\initialize-drive-d.txt"]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionWinAMI",
            { "Ref": "AWS::Region" },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "InstanceSecurityGroup"
              }
            ],
            "SubnetId": {
              "Fn::Select": [
                "1",
                { "Ref": "AppSubnet" }
              ]
            }
          },
          {
            "DeviceIndex": "1",
            "GroupSet": [
              {
                "Ref": "InstanceSecurityGroup"
              }
            ],
            "SubnetId": {
              "Fn::Select": [
                "1",
                { "Ref": "AppSubnet" }
              ]
            }
          }
        ],
        "IamInstanceProfile": { "Ref": "InstanceRoleInstanceProfile" },
        "SsmAssociations": [
          {
            "DocumentName": { "Ref": "SSMDocument" }
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": { "VolumeSize": "80" }
          },
          {
            "DeviceName": "/dev/sdm",
            "Ebs": { "VolumeSize": "100" }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell>\n",
                "cfn-init.exe -v --stack ", { "Ref": "AWS::StackName" }, " --resource EuroIRWeb2", " --region ", { "Ref": "AWS::Region" },
                "\n",
                "Read-S3Object -BucketName ", { "Ref": "BootstrapScriptLocation" }, " -Key Bootstrap.ps1 -File Bootstrap.ps1 \n",
                ".\\Bootstrap.ps1 -OctopusEnvironment \"", { "Ref": "OctopusEnvironment" }, "\" -OctopusMachineRole \"web-server\" -ServerConfigurationProject \"Configure EuroIR Servers\" \n",
                "Rename-Computer -NewName EuroIRWeb2 -Force",
                "\n",
                "</powershell> \n"                
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EuroIRWeb2"
          }
        ],
        "KeyName": { "Ref": "KeyName" }
      }
    },
    "SSMDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "1.2",
          "description": "Join instances to an AWS Directory Service domain.",
          "runtimeConfig": {
            "aws:domainJoin": {
              "properties": {
                "directoryId": {
                  "Ref": "ADDirectory"
                },
                "directoryName": {
                  "Ref": "ADDomain"
                },
                "dnsIpAddresses": {
                  "Ref": "ADDNS"
                }
              }
            }
          }
        }
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": {
          "Fn::Join": [
            "",
            [
              "ELB-",
              {
                "Ref": "APPGroupName"
              },
              "-Group"
            ]
          ]
        },
        "Subnets": {
          "Ref": "ELBSubnet"
        },
        "Instances": [
          { "Ref": "EuroIRWeb1" },
          { "Ref": "EuroIRWeb2" }
        ],
        "SecurityGroups": [
          {
            "Ref": "ELBSecurityGroup"
          }
        ],
        "CrossZone": "true",
        "Scheme": {
          "Ref": "ELBType"
        },
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          },
          {
            "LoadBalancerPort": "443",
            "InstancePort": "443",
            "Protocol": "TCP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable RDP access and HTTP access on the configured port",
        "VpcId": {
          "Ref": "VPCID"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "SourceSecurityGroupId": {
              "Ref": "RDPSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "135",
            "ToPort": "135",
            "CidrIp": "172.16.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "445",
            "ToPort": "445",
            "CidrIp": "172.16.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access on the configured port",
        "VpcId": {
          "Ref": "VPCID"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "APPGroupName"
              },
              "Role"
            ]
          ]
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:Describe*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:DescribeAssociation",
                "ssm:GetDocument",
                "ssm:ListAssociations",
                "ssm:CreateAssociation",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceInformation"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ds:CreateComputer",
                "ds:DescribeDirectories"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucketMultipartUploads"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    }
  },
  "Outputs": {
    "URL": {
      "Description": "URL of the website",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
      {
        "Label": { "default": "EC2 Instance Configuration" },
        "Parameters": [
          "InstanceType",
          "APPGroupName",
          "AppSubnet",
          "KeyName",
          "RDPSecurityGroup",
          "VPCID"
        ]
      },
      {
        "Label": { "default": "Load Balancer Configuration" },
        "Parameters": [
          "ELBType",
          "ELBSubnet"
        ]
       },
       {
        "Label": { "default": "Active Directory Configuration" },
        "Parameters": [
          "ADDomain",
          "ADDirectory",
          "ADDNS"
        ]
       },
       {
        "Label": { "default": "Octopus Deploy Configuration" },
        "Parameters": [
          "OctopusEnvironment",
          "BootstrapScriptLocation"
         ]
       }
    ]
   }
 }
}